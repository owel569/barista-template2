#!/usr/bin/env node

/**
 * Script de test pour v√©rifier l'installation automatique
 */

const { execSync } = require('child_process');
const fs = require('fs');

console.log('üß™ Test de l\'installation automatique...');

// V√©rifier que les fichiers essentiels existent
const requiredFiles = [
  'setup-universal.cjs',
  'setup-universal.js',
  'start.sh',
  'README.md',
  'INSTALLATION.md',
  'GITHUB_SETUP.md',
  'package.json',
  'server/index.ts'
];

console.log('üìÅ V√©rification des fichiers...');
for (const file of requiredFiles) {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} MANQUANT`);
  }
}

// V√©rifier que le fichier .env existe
console.log('\nüîß V√©rification de la configuration...');
if (fs.existsSync('.env')) {
  console.log('‚úÖ Fichier .env configur√©');
  const envContent = fs.readFileSync('.env', 'utf8');
  if (envContent.includes('DATABASE_URL')) {
    console.log('‚úÖ DATABASE_URL configur√©');
  } else {
    console.log('‚ùå DATABASE_URL manquant dans .env');
  }
} else {
  console.log('‚ö†Ô∏è  Fichier .env pas encore cr√©√© (normal lors du premier test)');
}

// V√©rifier que PostgreSQL est accessible
console.log('\nüóÑÔ∏è  V√©rification de PostgreSQL...');
try {
  execSync('which psql', { stdio: 'ignore' });
  console.log('‚úÖ PostgreSQL install√©');
} catch (error) {
  console.log('‚ùå PostgreSQL non accessible');
}

// V√©rifier que les d√©pendances npm sont install√©es
console.log('\nüì¶ V√©rification des d√©pendances...');
if (fs.existsSync('node_modules')) {
  console.log('‚úÖ Node modules install√©s');
} else {
  console.log('‚ùå Node modules manquants - ex√©cuter: npm install');
}

console.log('\nüéâ Test termin√©!');
console.log('\nCommandes d\'installation:');
console.log('1. npm install');
console.log('2. node setup-universal.cjs');
console.log('3. npm run dev');