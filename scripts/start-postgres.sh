#!/bin/bash

# Script de d√©marrage automatique PostgreSQL pour Replit
# Ce script assure que PostgreSQL fonctionne toujours, m√™me apr√®s red√©marrage

echo "üîß D√©marrage automatique PostgreSQL..."

# Variables de configuration
POSTGRES_DATA_DIR="/tmp/postgres_data"
POSTGRES_SOCKET_DIR="/tmp/postgres_run"
POSTGRES_LOG_FILE="/tmp/postgres.log"
POSTGRES_PORT="5432"
DATABASE_NAME="barista_cafe"

# Fonction pour cr√©er les r√©pertoires n√©cessaires
create_directories() {
    mkdir -p "$POSTGRES_DATA_DIR"
    mkdir -p "$POSTGRES_SOCKET_DIR"
    mkdir -p "$(dirname "$POSTGRES_LOG_FILE")"
}

# Fonction pour initialiser PostgreSQL
initialize_postgres() {
    if [ ! -f "$POSTGRES_DATA_DIR/PG_VERSION" ]; then
        echo "üóÑÔ∏è  Initialisation de PostgreSQL..."
        initdb -D "$POSTGRES_DATA_DIR" --auth-local=trust --auth-host=trust --username=runner
        if [ $? -eq 0 ]; then
            echo "‚úÖ PostgreSQL initialis√©"
        else
            echo "‚ùå Erreur lors de l'initialisation de PostgreSQL"
            exit 1
        fi
    fi
}

# Fonction pour d√©marrer PostgreSQL
start_postgres() {
    # V√©rifier si PostgreSQL fonctionne d√©j√†
    if pg_isready -h localhost -p $POSTGRES_PORT > /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL d√©j√† en cours d'ex√©cution"
        return 0
    fi

    echo "üöÄ D√©marrage de PostgreSQL..."
    
    # D√©marrer PostgreSQL en arri√®re-plan
    postgres -D "$POSTGRES_DATA_DIR" \
             -k "$POSTGRES_SOCKET_DIR" \
             -p "$POSTGRES_PORT" \
             -F \
             -c log_statement=none \
             -c log_min_duration_statement=1000 \
             -c max_connections=20 \
             >> "$POSTGRES_LOG_FILE" 2>&1 &

    # Attendre que PostgreSQL soit pr√™t
    echo "‚è≥ Attente de PostgreSQL..."
    for i in {1..30}; do
        if pg_isready -h localhost -p $POSTGRES_PORT > /dev/null 2>&1; then
            echo "‚úÖ PostgreSQL pr√™t"
            return 0
        fi
        sleep 1
    done
    
    echo "‚ùå PostgreSQL n'a pas d√©marr√© dans les temps"
    return 1
}

# Fonction pour cr√©er la base de donn√©es
create_database() {
    echo "üìä Cr√©ation de la base de donn√©es $DATABASE_NAME..."
    
    # V√©rifier si la base de donn√©es existe
    if psql -h localhost -p $POSTGRES_PORT -U runner -lqt | cut -d \| -f 1 | grep -qw "$DATABASE_NAME"; then
        echo "‚ÑπÔ∏è  Base de donn√©es $DATABASE_NAME existe d√©j√†"
    else
        createdb -h localhost -p $POSTGRES_PORT -U runner "$DATABASE_NAME"
        if [ $? -eq 0 ]; then
            echo "‚úÖ Base de donn√©es $DATABASE_NAME cr√©√©e"
        else
            echo "‚ùå Erreur lors de la cr√©ation de la base de donn√©es"
            return 1
        fi
    fi
}

# Fonction principale
main() {
    create_directories
    initialize_postgres
    start_postgres
    
    if [ $? -eq 0 ]; then
        create_database
        echo "üéâ PostgreSQL configur√© et pr√™t!"
        echo "üìã Configuration:"
        echo "   - Port: $POSTGRES_PORT"
        echo "   - Base de donn√©es: $DATABASE_NAME"
        echo "   - Utilisateur: runner"
        echo "   - Socket: $POSTGRES_SOCKET_DIR"
        echo "   - Logs: $POSTGRES_LOG_FILE"
        return 0
    else
        echo "‚ùå Erreur lors du d√©marrage de PostgreSQL"
        return 1
    fi
}

# Ex√©cuter le script
main "$@"