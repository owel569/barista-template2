#!/usr/bin/env tsx
import 'dotenv/config';
import { getDb } from '../server/db';
import { menuItems, menuItemImages } from '../shared/schema';
import { eq } from 'drizzle-orm';
import { getItemImageUrl } from '../client/src/lib/image-mapping';

// Mapping des am√©liorations de descriptions par nom d'√©l√©ment
const ENHANCED_DESCRIPTIONS = {
  'Espresso': 'Espresso italien authentique aux ar√¥mes intenses, crema dor√©e parfaite, grains torr√©fi√©s artisanalement',
  'Cappuccino': '√âquilibre parfait entre espresso cors√© et mousse de lait velout√©e, saupoudr√© de cacao pur',
  'Latte': 'Caf√© au lait onctueux avec art latte dessin√© par nos baristas experts, douceur et intensit√© r√©unies',
  'Americano': 'Double espresso allong√© √† l\'eau chaude, caf√© long et intense pour les amateurs de saveurs authentiques',
  'Th√© Earl Grey': 'Th√© noir Ceylon premium aux bergamotes naturelles, servi avec miel de lavande et citron frais',
  'Chocolat chaud': 'Chocolat belge fondu avec lait entier fermier, chantilly maison et copeaux de chocolat noir 70%',
  'Th√© vert Sencha': 'Th√© vert japonais d√©licat aux propri√©t√©s antioxydantes, notes fra√Æches et herbac√©es',
  'Croissant': 'Viennoiserie fran√ßaise traditionnelle, p√¢te feuillet√©e au beurre AOP Charentes-Poitou, dor√©e au four',
  'Muffin': 'Muffin moelleux aux myrtilles fra√Æches et p√©pites de chocolat blanc, recette maison authentique',
  '√âclair': 'P√¢te √† choux a√©rienne garnie de cr√®me p√¢tissi√®re au caf√©, gla√ßage fondant au mokaccino italien',
  'Quiche': 'Quiche lorraine traditionnelle aux lardons fum√©s, ≈ìufs fermiers et cr√®me fra√Æche, p√¢te bris√©e maison',
  'Sandwich': 'Sandwich gourmand sur pain artisanal, ingr√©dients frais s√©lectionn√©s, accompagn√© de salade croquante'
};

async function updateMenuDescriptions() {
  console.log('üìù Mise √† jour des descriptions du menu...');
  
  try {
    const db = await getDb();
    
    // R√©cup√©rer tous les √©l√©ments de menu
    const menuItemsList = await db.select().from(menuItems);
    console.log(`üìã ${menuItemsList.length} √©l√©ments de menu trouv√©s`);
    
    let updatedCount = 0;
    let imagesAdded = 0;
    
    for (const item of menuItemsList) {
      let hasUpdates = false;
      const updates: unknown = {};
      
      // Mettre √† jour la description si elle existe
      const enhancedDesc = ENHANCED_DESCRIPTIONS[item.name];
      if (enhancedDesc && enhancedDesc !== item.description) {
        updates.description = enhancedDesc;
        hasUpdates = true;
      }
      
      // Augmenter l√©g√®rement les prix pour √™tre plus r√©alistes
      const currentPrice = typeof item.price === 'number' ? item.price : parseFloat(item.price || '0');
      if (currentPrice < 3) {
        updates.price = currentPrice + 0.5; // +0.50‚Ç¨
        hasUpdates = true;
      } else if (currentPrice < 5) {
        updates.price = currentPrice + 0.3; // +0.30‚Ç¨
        hasUpdates = true;
      }
      
      // Appliquer les mises √† jour si n√©cessaire
      if (hasUpdates) {
        await db.update(menuItems)
          .set(updates)
          .where(eq(menuItems.id, item.id));
        
        console.log(`‚úÖ Mis √† jour: ${item.name} - Nouvelle description et prix`);
        updatedCount++;
      }
      
      // Ajouter une image si elle n'existe pas
      const existingImages = await db.select()
        .from(menuItemImages)
        .where(eq(menuItemImages.menuItemId, item.id));
      
      if (existingImages.length === 0) {
        const imageUrl = getItemImageUrl(item.name);
        await db.insert(menuItemImages).values({
          menuItemId: item.id,
          imageUrl: imageUrl,
          altText: `Image de ${item.name}`,
          isPrimary: true,
          uploadMethod: 'unsplash'
        });
        
        console.log(`üñºÔ∏è Image ajout√©e pour: ${item.name}`);
        imagesAdded++;
      }
    }
    
    console.log(`\nüéâ Mise √† jour termin√©e !`);
    console.log(`üìä ${updatedCount} descriptions/prix mis √† jour`);
    console.log(`üñºÔ∏è ${imagesAdded} images ajout√©es`);
    
    // Afficher un √©chantillon du nouveau menu
    console.log('\nüìã Aper√ßu du menu enrichi:');
    const sampleItems = await db.select().from(menuItems).limit(3);
    for (const item of sampleItems) {
      console.log(`   ‚Ä¢ ${item.name)} - ${item.price}‚Ç¨`);
      console.log(`     ${item.description}`);
    }
    
  } catch (error) {
    logger.error('‚ùå Erreur lors de la mise √† jour:', { error: error instanceof Error ? error.message : 'Erreur inconnue' )});
    process.exit(1);
  }
}

// Ex√©cuter si appel√© directement
if (import.meta.main) {
  updateMenuDescriptions()
    .then(() => {
      console.log('‚úÖ Mise √† jour termin√©e avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      logger.error('‚ùå √âchec de la mise √† jour:', { error: error instanceof Error ? error.message : 'Erreur inconnue' )});
      process.exit(1);
    });
}

export default updateMenuDescriptions;