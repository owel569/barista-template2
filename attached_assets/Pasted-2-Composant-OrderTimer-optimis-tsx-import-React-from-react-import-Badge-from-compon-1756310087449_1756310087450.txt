2. Composant OrderTimer optimisé :
tsx
import React from 'react';
import { Badge } from '@/components/ui/badge';
import { Clock } from 'lucide-react';

interface OrderTimerProps {
  createdAt: string;
  estimatedTime: number;
}

export function OrderTimer({ createdAt, estimatedTime }: OrderTimerProps) {
  const [timeElapsed, setTimeElapsed] = React.useState(0);

  React.useEffect(() => {
    const created = new Date(createdAt).getTime();
    const updateElapsed = () => {
      const elapsed = Math.floor((Date.now() - created) / 60000);
      setTimeElapsed(elapsed);
    };

    updateElapsed();
    // Optimisation : vérifier toutes les 30 secondes au lieu de 60
    const timer = setInterval(updateElapsed, 30000);

    return () => clearInterval(timer);
  }, [createdAt]);

  const isOverdue = timeElapsed > estimatedTime;

  return (
    <div className="flex items-center gap-1 min-w-[120px]">
      <Clock className={`h-3 w-3 ${isOverdue ? 'text-red-500' : 'text-amber-500'}`} />
      <Badge 
        variant={isOverdue ? "destructive" : "outline"} 
        className="text-xs font-mono"
      >
        {timeElapsed}m/{estimatedTime}m
      </Badge>
    </div>
  );
}
3. Utilisation efficace des icônes dans le tableau :
tsx
// Dans le tableau des commandes
<TableCell>
  <div className="flex items-center gap-2">
    {order.isInternational && (
      <Globe className="h-3 w-3 text-blue-500" title="Commande internationale" />
    )}
    {order.orderType === 'delivery' && (
      <Truck className="h-3 w-3 text-green-500" title="Livraison" />
    )}
    <span className="text-xs capitalize">
      {order.platform === 'website' ? 'Web' : 
       order.platform === 'mobile_app' ? 'App' : 'Tel'}
    </span>
  </div>
</TableCell>
4. Section paiement optimisée :
tsx
// Dans le dialog de détails
<div className="border-t pt-3 mt-3">
  <div className="flex items-center gap-2 mb-2">
    <CreditCard className="h-4 w-4 text-purple-500" />
    <span className="text-sm font-medium">Paiement</span>
  </div>
  <div className="grid grid-cols-2 gap-2 text-sm">
    <div>
      <span className="text-muted-foreground">Méthode: </span>
      <span className="capitalize">{order.paymentMethod}</span>
    </div>
    <div>
      <span className="text-muted-foreground">Statut: </span>
      <Badge variant={
        order.paymentStatus === 'paid' ? 'default' :
        order.paymentStatus === 'pending' ? 'secondary' : 'destructive'
      } className="text-xs">
        {order.paymentStatus === 'paid' ? 'Payé' : 
         order.paymentStatus === 'pending' ? 'En attente' : 'Échec'}
      </Badge>
    </div>
  </div>
</div>
5. Header de dialog optimisé :
tsx
<DialogHeader className="flex flex-row items-center gap-2 pb-4">
  <ShoppingCart className="h-5 w-5 text-green-600" />
  <DialogTitle className="text-lg">Commande #{selectedOrder.orderNumber}</DialogTitle>
</DialogHeader>