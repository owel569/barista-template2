#!/usr/bin/env node

/**
 * Script de configuration automatique pour le projet Barista Caf√©
 * Ce script configure automatiquement la base de donn√©es et initialise le projet
 */

const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs');
const path = require('path');

const execAsync = promisify(exec);

async function checkEnvironment() {
  console.log('üîç V√©rification de l\'environnement...');
  
  // D√©tection simple : si DATABASE_URL existe, on continue
  // Sinon on aide √† configurer
  if (process.env.DATABASE_URL) {
    console.log('‚úÖ Base de donn√©es d√©j√† configur√©e');
    return 'configured';
  } else {
    console.log('‚öôÔ∏è  Configuration n√©cessaire');
    return 'needs-config';
  }
}

async function setupDatabase(environment) {
  console.log('üóÑÔ∏è  Configuration de la base de donn√©es...');
  
  if (environment === 'configured') {
    console.log('‚úÖ DATABASE_URL d√©tect√©, configuration d√©j√† faite');
    return true;
  }
  
  // Environnement non configur√© - cr√©er .env si n√©cessaire
  const envPath = path.join(process.cwd(), '.env');
  
  if (!fs.existsSync(envPath)) {
    // Copier depuis .env.example ou cr√©er
    const examplePath = path.join(process.cwd(), '.env.example');
    if (fs.existsSync(examplePath)) {
      fs.copyFileSync(examplePath, envPath);
      console.log('‚úÖ Fichier .env cr√©√© depuis .env.example');
    } else {
      const envContent = `# Configuration Barista Caf√©
DATABASE_URL=postgresql://username:password@localhost:5432/barista_cafe
NODE_ENV=development
JWT_SECRET=votre_secret_jwt_super_securise_changez_moi
PORT=5000
`;
      fs.writeFileSync(envPath, envContent);
      console.log('‚úÖ Fichier .env cr√©√©');
    }
  }
  
  // Charger .env et v√©rifier
  require('dotenv').config();
  
  if (!process.env.DATABASE_URL || process.env.DATABASE_URL.includes('username:password')) {
    console.log('\nüìã CONFIGURATION REQUISE:');
    console.log('');
    console.log('üóÑÔ∏è  Base de donn√©es PostgreSQL n√©cessaire');
    console.log('');
    console.log('Options (au choix):');
    console.log('  ‚Ä¢ Local: Installez PostgreSQL + cr√©ez DB "barista_cafe"');
    console.log('  ‚Ä¢ Cloud: Neon.tech, Supabase.com, Railway.app (gratuit)');
    console.log('  ‚Ä¢ Docker: docker run postgres (si Docker install√©)');
    console.log('');
    console.log('Puis modifiez DATABASE_URL dans .env avec votre URL');
    console.log('Format: postgresql://user:password@host:port/database');
    console.log('');
    console.log('Relancez ensuite: node setup-project.cjs');
    return false;
  }
  
  return true;
}

async function installDependencies() {
  console.log('üì¶ Installation des d√©pendances...');
  
  try {
    await execAsync('npm install', { stdio: 'inherit' });
    console.log('‚úÖ D√©pendances install√©es');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'installation des d√©pendances:', error.message);
    return false;
  }
}

async function setupDatabaseSchema() {
  console.log('üèóÔ∏è  Configuration du sch√©ma de la base de donn√©es...');
  
  try {
    await execAsync('npx drizzle-kit push --force');
    console.log('‚úÖ Sch√©ma de base de donn√©es configur√©');
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è  Erreur de configuration du sch√©ma (peut √™tre normal si d√©j√† configur√©)');
    return true; // Continue m√™me en cas d'erreur
  }
}

async function main() {
  console.log('üöÄ Configuration automatique du projet Barista Caf√©\n');
  
  try {
    // 1. V√©rifier l'environnement
    const environment = await checkEnvironment();
    
    // 2. Installer les d√©pendances
    const depsInstalled = await installDependencies();
    if (!depsInstalled) {
      process.exit(1);
    }
    
    // 3. Configurer la base de donn√©es
    const dbConfigured = await setupDatabase(environment);
    if (!dbConfigured) {
      console.log('\n‚ùå Configuration de la base de donn√©es n√©cessaire');
      console.log('üîß Apr√®s avoir configur√© la base de donn√©es, relancez: npm run setup');
      process.exit(1);
    }
    
    // 4. Configurer le sch√©ma
    const schemaConfigured = await setupDatabaseSchema();
    if (!schemaConfigured) {
      process.exit(1);
    }
    
    console.log('\nüéâ Configuration termin√©e avec succ√®s !');
    console.log('üí° Vous pouvez maintenant lancer le projet avec: npm run dev');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors de la configuration:', error.message);
    process.exit(1);
  }
}

// Lancer le script seulement s'il est ex√©cut√© directement
if (require.main === module) {
  main();
}

module.exports = { main };