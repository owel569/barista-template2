#!/usr/bin/env node

/**
 * Script de configuration automatique pour le projet Barista Caf√©
 * Ce script configure automatiquement la base de donn√©es et initialise le projet
 */

const { exec } = require('child_process');
const { promisify } = require('util');
const fs = require('fs');
const path = require('path');

const execAsync = promisify(exec);

async function checkEnvironment() {
  console.log('üîç V√©rification de l\'environnement...');
  
  // V√©rifier si nous sommes sur Replit
  const isReplit = process.env.REPL_ID || process.env.REPLIT_DB_URL;
  
  // V√©rifier si nous sommes sur GitHub Codespaces
  const isCodespaces = process.env.CODESPACES || process.env.GITHUB_CODESPACES_PORT_FORWARDING_DOMAIN;
  
  // V√©rifier si nous sommes sur Gitpod
  const isGitpod = process.env.GITPOD_WORKSPACE_ID;
  
  if (isReplit) {
    console.log('‚úÖ Environnement Replit d√©tect√©');
    return 'replit';
  } else if (isCodespaces) {
    console.log('‚úÖ Environnement GitHub Codespaces d√©tect√©');
    return 'codespaces';
  } else if (isGitpod) {
    console.log('‚úÖ Environnement Gitpod d√©tect√©');
    return 'gitpod';
  } else {
    console.log('üñ•Ô∏è  Environnement local d√©tect√©');
    return 'local';
  }
}

async function setupDatabase(environment) {
  console.log('üóÑÔ∏è  Configuration de la base de donn√©es...');
  
  if (environment === 'replit') {
    // Sur Replit, v√©rifier si DATABASE_URL existe
    if (!process.env.DATABASE_URL) {
      console.log('‚ùå DATABASE_URL non configur√© sur Replit');
      console.log('‚ÑπÔ∏è  Cr√©ez une base de donn√©es PostgreSQL dans les secrets Replit');
      console.log('   Variable: DATABASE_URL');
      console.log('   Format: postgresql://user:password@host:port/database');
      return false;
    }
  } else if (environment === 'codespaces' || environment === 'gitpod') {
    // GitHub Codespaces ou Gitpod - configuration cloud
    if (!process.env.DATABASE_URL) {
      console.log('üìù Configuration pour environnement cloud...');
      console.log('‚ÑπÔ∏è  Configuration requise:');
      console.log('   1. Cr√©ez une base de donn√©es gratuite sur:');
      console.log('      - Neon Database: https://neon.tech');
      console.log('      - Supabase: https://supabase.com');
      console.log('   2. Ajoutez la variable DATABASE_URL aux secrets');
      console.log('   3. Relancez le script');
      return false;
    }
  } else {
    // Environnement local
    const envPath = path.join(process.cwd(), '.env');
    
    if (!fs.existsSync(envPath)) {
      // Copier le fichier exemple
      const examplePath = path.join(process.cwd(), '.env.example');
      if (fs.existsSync(examplePath)) {
        fs.copyFileSync(examplePath, envPath);
        console.log('‚úÖ Fichier .env cr√©√© depuis .env.example');
      } else {
        const envContent = `# Configuration Barista Caf√©
DATABASE_URL=postgresql://username:password@localhost:5432/barista_cafe
NODE_ENV=development
JWT_SECRET=votre_secret_jwt_super_securise
PORT=5000
`;
        fs.writeFileSync(envPath, envContent);
        console.log('‚úÖ Fichier .env cr√©√©');
      }
      
      console.log('‚ö†Ô∏è  √âTAPES SUIVANTES:');
      console.log('   1. Installez PostgreSQL localement');
      console.log('   2. Cr√©ez une base de donn√©es "barista_cafe"');
      console.log('   3. Modifiez DATABASE_URL dans .env');
      console.log('   4. Relancez: node setup-project.cjs');
      return false;
    }
    
    // Charger les variables d'environnement
    require('dotenv').config();
    
    if (!process.env.DATABASE_URL) {
      console.log('‚ùå DATABASE_URL non configur√© dans .env');
      console.log('‚ÑπÔ∏è  Modifiez DATABASE_URL dans le fichier .env');
      return false;
    }
  }
  
  return true;
}

async function installDependencies() {
  console.log('üì¶ Installation des d√©pendances...');
  
  try {
    await execAsync('npm install', { stdio: 'inherit' });
    console.log('‚úÖ D√©pendances install√©es');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'installation des d√©pendances:', error.message);
    return false;
  }
}

async function setupDatabaseSchema() {
  console.log('üèóÔ∏è  Configuration du sch√©ma de la base de donn√©es...');
  
  try {
    await execAsync('npx drizzle-kit push --force');
    console.log('‚úÖ Sch√©ma de base de donn√©es configur√©');
    return true;
  } catch (error) {
    console.log('‚ö†Ô∏è  Erreur de configuration du sch√©ma (peut √™tre normal si d√©j√† configur√©)');
    return true; // Continue m√™me en cas d'erreur
  }
}

async function main() {
  console.log('üöÄ Configuration automatique du projet Barista Caf√©\n');
  
  try {
    // 1. V√©rifier l'environnement
    const environment = await checkEnvironment();
    
    // 2. Installer les d√©pendances
    const depsInstalled = await installDependencies();
    if (!depsInstalled) {
      process.exit(1);
    }
    
    // 3. Configurer la base de donn√©es
    const dbConfigured = await setupDatabase(environment);
    if (!dbConfigured) {
      console.log('\n‚ùå Configuration de la base de donn√©es n√©cessaire');
      console.log('üîß Apr√®s avoir configur√© la base de donn√©es, relancez: npm run setup');
      process.exit(1);
    }
    
    // 4. Configurer le sch√©ma
    const schemaConfigured = await setupDatabaseSchema();
    if (!schemaConfigured) {
      process.exit(1);
    }
    
    console.log('\nüéâ Configuration termin√©e avec succ√®s !');
    console.log('üí° Vous pouvez maintenant lancer le projet avec: npm run dev');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors de la configuration:', error.message);
    process.exit(1);
  }
}

// Lancer le script seulement s'il est ex√©cut√© directement
if (require.main === module) {
  main();
}

module.exports = { main };